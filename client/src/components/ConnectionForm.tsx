/* eslint-disable @typescript-eslint/no-explicit-any */

import React, { useState } from 'react';
import { connectToClickHouse } from '../services/apiClient';
import './ConnectionForm.css';

interface ConnectionFormProps {
  onConnected: (connected: boolean) => void;
}

const ConnectionForm: React.FC<ConnectionFormProps> = ({ onConnected }) => {
  const [host, setHost] = useState('localhost');
  const [port, setPort] = useState('8123');
  const [database, setDatabase] = useState('default');
  const [username, setUsername] = useState('default');
  const [authType, setAuthType] = useState<'password' | 'jwt'>('password');
  const [password, setPassword] = useState('');
  const [jwtToken, setJwtToken] = useState('');
  const [generateJwt, setGenerateJwt] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [tokenStatus, setTokenStatus] = useState<'valid' | 'invalid' | 'unknown'>('unknown');
  const [tokenInfo] = useState<any>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      // Simplified params - we'll use the password 'clickhouse' on the server side
      const connectionParams = {
        host,
        port,
        database,
        username,
      };

      console.log('Attempting connection with:', connectionParams);
      
      const response = await connectToClickHouse(connectionParams);
      
      if (response.data.success) {
        if (response.data.token) {
          setJwtToken(response.data.token);
          setTokenStatus('valid');
        }
        
        onConnected(true);
      } else {
        setError(response.data.message || 'Connection failed');
        onConnected(false);
      }
    } catch (err: any) {
      console.error('Connection error:', err.response?.data || err);
      setError(err.response?.data?.message || err.message || 'Failed to connect');
      onConnected(false);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="connection-form">
      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {tokenInfo && authType === 'jwt' && (
        <div className="token-info">
          <p>Token {tokenInfo.provided ? 'provided by user' : 'generated by server'}</p>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="host">Host</label>
          <input
            type="text"
            id="host"
            value={host}
            onChange={(e) => setHost(e.target.value)}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="port">Port</label>
          <input
            type="text"
            id="port"
            value={port}
            onChange={(e) => setPort(e.target.value)}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="database">Database</label>
          <input
            type="text"
            id="database"
            value={database}
            onChange={(e) => setDatabase(e.target.value)}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="username">Username</label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
        </div>
        
        <div className="form-group">
          <label>Authentication Type</label>
          <div className="auth-type-selector">
            <label>
              <input
                type="radio"
                name="authType"
                value="password"
                checked={authType === 'password'}
                onChange={() => setAuthType('password')}
              />
              Password
            </label>
            <label>
              <input
                type="radio"
                name="authType"
                value="jwt"
                checked={authType === 'jwt'}
                onChange={() => setAuthType('jwt')}
              />
              JWT Token
            </label>
          </div>
        </div>
        
        {authType === 'password' ? (
          <div className="form-group">
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
        ) : (
          <div>
            <div className="form-group checkbox-group">
              <label>
                <input
                  type="checkbox"
                  checked={generateJwt}
                  onChange={(e) => setGenerateJwt(e.target.checked)}
                />
                Generate JWT token automatically
              </label>
            </div>
            
            {!generateJwt && (
              <div className="form-group">
                <label htmlFor="jwtToken">JWT Token</label>
                <textarea
                  id="jwtToken"
                  value={jwtToken}
                  onChange={(e) => setJwtToken(e.target.value)}
                  rows={4}
                  required
                />
              </div>
            )}
            
            {generateJwt && jwtToken && (
              <div className="generated-token">
                <h4>Generated JWT Token:</h4>
                <pre className="token-display">{jwtToken}</pre>
                <div className="token-status valid">
                  <span className="valid">✓ Token generated successfully</span>
                </div>
              </div>
            )}
            
            {authType === 'jwt' && !generateJwt && jwtToken && (
              <div className={`token-status ${tokenStatus}`}>
                {tokenStatus === 'valid' && <span className="valid">✓ Token is valid</span>}
                {tokenStatus === 'invalid' && <span className="invalid">✗ Token is invalid</span>}
                {tokenStatus === 'unknown' && <span className="unknown">? Token validation pending</span>}
              </div>
            )}
          </div>
        )}
        
        <button type="submit" disabled={loading}>
          {loading ? 'Connecting...' : 'Connect'}
        </button>
      </form>
    </div>
  );
};

export default ConnectionForm;